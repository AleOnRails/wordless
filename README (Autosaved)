# Wordless

Wordless is an opionated Wordpress plugin that dramatically speed up and enhances your custom themes creation. Some of its features are:

* A structured, organized and clean theme organization (taken directly from Rails);
* Ability to write PHP code using the beautiful [Haml templating system](http://haml-lang.com/);
* Ability to write CSS stylesheets using the awesome [Sass syntax](sass-lang.com) and the [Compass framework](http://compass-style.org/);
* Ability to write [Coffeescript](http://jashkenas.github.com/coffee-script/) instead of the boring, oldish Javascript;
* A growing set of handy and documented helper functions ready to be used within your views;

## Wordless Theme anatomy

That's a typical Wordless theme directory structure:

	your_theme_dir
	├── config
	│   ├── helpers
	│   ├── initializers
	│   └── locales
	├── public
	│   ├── assets
	│   │   ├── javascripts
	│   │   └── stylesheets
	│   └── images
	├── theme
	│   ├── assets
	│   │   ├── javascripts
	│   │   └── stylesheets
	│   └── views
    │       └── layouts
	└── index.php

Let's see in detail what is the purpose of all those directories:

### Wordless "routes"

The `index.php` serves as a router to all the theme views. 

```php
<?php

if (is_front_page()) {
  render_view("static/homepage)");
} else if (is_post_type_archive("portfolio_work")) {
  render_view("portfolio/index");
} else if (is_post_type("portfolio_work")) {
  render_view("portfolio/single");
} 
```
As you can see, you first determine the type of the page using [Wordpress conditional tags](http://codex.wordpress.org/Conditional_Tags), and then delegate the rendering to some particular view.

### Theme Views (`theme/views/*.haml`)

That's the directory where you'll find yourself coding for most of the time. Here you can create a view for each main page of your theme, using Haml syntax. Feel free to create subdirectories, too. Here's what could be an example for the typical [Wordpress loop](http://codex.wordpress.org/The_Loop):

```haml
/ theme/views/posts/archive.haml
%h2 Blog archive
%ul.blog_archive
  - while (have_posts())
    - the_post()
    %li.post= render_partial("posts/single")

/ theme/views/posts/_single.haml
%h3= link_to(get_the_title(), get_permalink())
.content= get_the_filtered_content()
```

Wordless uses [Phamlp](http://code.google.com/p/phamlp/) for your views, a great PHP port of the Haml ruby gem. In this little snippet, please note the following:

* The view is delegating some rendering work to a view partial called "_single.haml" (partial files start with an underscore). Partials are shared between views, and can be used as many times as you want;
* There's no layout here, just content: the layout of the page is stored in a secondary file, placed in the `theme/views/layouts` directory;
* We're already using two of the 40+ Wordless helper functions, `link_to()` and `get_the_filtered_content()`, to DRY up this view. 

Don't you already feel better?

### Layouts (`theme/views/layouts` directory)

Just like Rails, when Wordless renders a view as a response, it does so by combining the view with a layout. Within a layout, you have access to the `yaml()` helper to combine it with the main content:

```haml
!!! 5
%html(html_attrs())
  %head

    / Charset
    %meta(http-equiv="Content-type" content="text/html;charset=UTF-8")
    / Title
    %title= get_page_title(bloginfo('name'), " – ")
    / Stylesheets
    = include_stylesheet("application")
    / HTML5 Shiv
    /[if lt IE 9]
      = include_javascript("http://html5shiv.googlecode.com/svn/trunk/html5.js")

  %body.home-layout
    = render_partial("common/header")
    = yield()
    = render_partial("common/footer")
    = include_javascript("jquery")
	= include_javascript("application")
```

### Helpers (`config/helpers/*.php` files)

Helpers are basically small functions that can be called in your views to help keep your code stay DRY. Create as many helper files and functions as you want and put them in this directory, they will all be required within your views, together with the [default Wordless helpers](https://github.com/welaika/wordless/tree/master/wordless/helpers). These are just a small subset of all the 40+ helpers Wordless gives you for free:

* `lorem()` - A "lorem ipsum" text and HTML generator;
* `pluralize()` - Attempts to pluralize words;
* `truncate()`- Truncates a given text after a given length;
* `new_post_type()` and `new_taxonomy()` - Help you create custom posts and taxonomy;
* `get_the_time_ago()` - Reports the approximate distance in time between two dates;


### Initializers (`config/initializers/*.php` files)

Once upon a time there was the ugly functions.php, where you would drop every bit of code external to the theme views (custom post types, taxonomies, wordpress filters, hooks, you name it). That was just terrible, isn't it? 
Wordless let you split you code into many modular initializer files, each one with a specific target:

	├── custom_post_types.php
	├── hooks.php
	├── menus.php
	├── wordless_preferences.php
	└── thumbnail_sizes.php

These are just some file name examples: you can organize them the way you prefer. Each file in this directory will be automatically required by Wordless.

### Locale files (`config/locales` directory)

Just drop all your theme locale files in this directory. Wordless will take care of calling [`load_theme_textdomain()`](http://codex.wordpress.org/Function_Reference/load_theme_textdomain) for you.

### Assets

Working with assets is pretty easy in Wordless:

* Put all the images, the CSS and the Javascript files inside the `public` directory;
* Put all your Coffeescript and Sass files within the `theme/assets` directory;

At this point, simply include the assets in your Haml template using the `include_javascript()` and `include_stylesheet()` helpers. 

Wordless will take care of compiling all the required files, caching them if they do not change between two consecutive requests.

## Requirements

Your development machine needs the following executables:

* [NodeJS](http://nodejs.org/) (`brew install node`);
* [npm](http://npmjs.org/) (`curl http://npmjs.org/install.sh | sh`);
* [Coffeescript](http://jashkenas.github.com/coffee-script/) (`npm install -g coffee-script`);
* Ruby and the [compass](https://github.com/chriseppstein/compass) gem (`gem install compass`)

The production machine doesn't need any extra-dependencies, as all the assets gets cached by Wordless.

## Installation and Configuration

Just install the Wordless plugin, and you should ready to go. If you need to specify some preferences, you can do it within an initializers, these are the current Wordless defaults:

```php
<?php
Wordless::set_preference("compass.compass_path",     "/usr/bin/compass");
Wordless::set_preference("coffeescript.nodejs_path", "/usr/bin/node");
Wordless::set_preference("coffeescript.coffee_path", "/usr/bin/coffee");
Wordless::set_preference("coffeescript.bare",        true)
Wordless::set_preference("compass.output_style",     "compressed");
```

## Known problems and limitations
* This is alpha software, everything is still subject to change :)
* The routing part can be drammaticaly improved to make it more readable and DRY

## License

(The MIT License)

Copyright © 2011 weLaika

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.